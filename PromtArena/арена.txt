Документация для Разработчика: Промт Арена
Версия: 0.1
Дата: 2025-04-15
Содержание:
1. Цель и Задачи Проекта
2. Архитектура Приложения
   * Технологический Стек
   * Структура Проекта
   * Принципы Взаимодействия
   * Принцип Модификации Кода
3. 4. Подробное Описание Файлов
   * Бэкенд (
      * config.py
      * database.py
      * data_logic.py
      * models_io.py
      * main.py
   *    * Фронтенд (
      * index.html
      * css/style.css
      * js/script.js
   *    * Конфигурация и Запуск
      * Dockerfile
      * docker-compose.yml
      * requirements.txt
      * .env
   * 5. 6. Инструкции по Запуску
7. Руководство по Доработке
________________






1. Цель и Задачи Проекта
Цель: Создать веб-приложение "Промт Арена" – интерактивную платформу для пользователей Hugging Face, позволяющую тестировать, сравнивать и оценивать не только сами Большие Языковые Модели (LLM), но и эффективность различных промтов для них.
Задачи:
* Предоставить пользователям интерфейс для выбора LLM из Hugging Face Hub по категориям (программирование, математика, OCR и т.д.) и подкатегориям.
* Реализовать режим "Арены", где пользователь может отправить один и тот же промт одной или двум выбранным моделям одновременно.
* Интегрировать окно чата для отображения диалога с моделями.
* Интегрировать специализированное окно для:
   * Визуализации HTML/CSS/JS кода, сгенерированного моделью.
   * Режима "мини-редактора" для работы с пользовательским кодом (вкладки, подсветка синтаксиса).
* * Внедрить систему пользовательских оценок (рейтинг от 1 до 10) для ответов моделей.
* Собирать данные об оценках для формирования лидербордов моделей (и потенциально промтов) в различных категориях.
* Обеспечить современный, интуитивно понятный пользовательский интерфейс.
* Построить архитектуру, позволяющую легко модифицировать отдельные компоненты (как бэкенда, так и фронтенда) с минимально необходимым контекстом, что упрощает доработку с помощью ИИ-ассистентов.
* Обеспечить простой и быстрый автономный запуск приложения с помощью Docker.
________________


2. Архитектура Приложения
Приложение построено по клиент-серверной архитектуре с использованием Docker для контейнеризации. Бэкенд предоставляет REST API, с которым взаимодействует фронтенд (Single Page Application).
Технологический Стек
* Бэкенд: Python 3.x, FastAPI
* Фронтенд: HTML5, CSS3 (с использованием CDN CSS-фреймворка, например, Tailwind CSS или Bootstrap), JavaScript (Vanilla JS)
* Редактор/Визуализатор Кода: Ace Editor или Monaco Editor (через CDN)
* База Данных: SQLite (для старта), с возможностью перехода на PostgreSQL. SQLAlchemy рекомендуется как ORM.
* Взаимодействие с Моделями: huggingface_hub, transformers (для локального инференса) или requests (для Hugging Face Inference API).
* Контейнеризация: Docker, Docker Compose
Структура Проекта

prompt-arena/
├── backend/
│   ├── main.py             # Главный файл API, оркестрация, статика
│   ├── models_io.py        # Логика взаимодействия с моделями HF
│   ├── data_logic.py       # Логика категорий, рейтингов, лидербордов
│   ├── database.py         # Работа с БД (CRUD, модели)
│   └── config.py           # Конфигурация приложения
│
├── frontend/               # Статические файлы фронтенда
│   ├── index.html          # Основная HTML страница (SPA)
│   ├── css/
│   │   └── style.css       # Кастомные стили
│   └── js/
│       └── script.js       # Весь JavaScript фронтенда
│
├── Dockerfile              # Инструкции для сборки Docker-образа
├── docker-compose.yml      # Файл для запуска через Docker Compose
├── requirements.txt        # Зависимости Python
└── .env                    # Переменные окружения (секреты, настройки)


Принципы Взаимодействия
1. API-Centric: Фронтенд (frontend/js/script.js) взаимодействует с бэкендом исключительно через REST API эндпоинты, определенные в backend/main.py.
2. Оркестрация Бэкенда: backend/main.py принимает HTTP-запросы, валидирует их (используя Pydantic модели из backend/config.py или определенные локально) и вызывает соответствующие функции из backend/models_io.py или backend/data_logic.py для выполнения бизнес-логики.
3. Статика через Бэкенд: FastAPI сервер (backend/main.py) настроен на раздачу статических файлов (HTML, CSS, JS) из папки frontend/. Это позволяет запустить все приложение одной командой.
4. Состояние на Клиенте: Фронтенд (frontend/js/script.js) управляет состоянием пользовательского интерфейса (выбранные модели, история чата, текущий режим и т.д.).
Принцип Модификации Кода
Архитектура спроектирована для упрощения модификации с помощью ИИ-ассистентов:
* Модификация модуля Бэкенда (например, models_io.py): Требуется предоставить ИИ только backend/main.py (для понимания API эндпоинтов, Pydantic моделей запросов/ответов и того, как вызывается нужная функция) и сам файл модуля (backend/models_io.py). Знание других модулей (data_logic.py, database.py) не обязательно.
* Модификация Фронтенда: Требуется предоставить ИИ backend/main.py (для понимания контракта API – доступных эндпоинтов, форматов данных) и соответствующие файлы из папки frontend/ (index.html, css/style.css, js/script.js). Знание внутренней реализации бэкенд-модулей (models_io.py, data_logic.py и т.д.) не требуется.
________________


3. Подробное Описание Файлов
Бэкенд (backend/)
backend/config.py
* Назначение: Управление конфигурацией приложения.
* Содержание:
   * Определение Pydantic модели Settings для загрузки и валидации переменных окружения из .env файла (с использованием python-dotenv).
   * Переменные: HUGGING_FACE_HUB_TOKEN, DATABASE_URL, DEFAULT_MODEL, AVAILABLE_CATEGORIES (может быть здесь или в data_logic.py), LOG_LEVEL и т.д.
   * Могут также содержаться Pydantic модели, используемые для валидации данных в API запросах/ответах в main.py, если они являются общими или конфигурационными.
* * Примечания:
   * Использовать type hints для всех полей Settings.
   * Предоставить файл .env.example в репозитории.
   * Все конфигурируемые параметры должны быть доступны через экземпляр Settings.
* backend/database.py
* Назначение: Слой абстракции для взаимодействия с базой данных.
* Содержание:
   * Настройка соединения с БД (например, через SQLAlchemy). Инициализация движка (engine), сессии (SessionLocal).
   * Определение ORM моделей (например, class Rating(Base): ...) для таблиц БД (как минимум, таблица для хранения оценок: id, model_id, prompt_text (или prompt_hash), rating (1-10), comparison_winner (модель 1, модель 2, ничья), timestamp, user_identifier (опционально)).
   * Функции CRUD (Create, Read, Update, Delete) для работы с данными:
      * create_rating(db: Session, rating_data: schemas.RatingCreate)
      * get_ratings_by_model(db: Session, model_id: str)
      * get_aggregated_leaderboard_data(db: Session, category: Optional[str] = None)
   *    * Функция для инициализации БД (создания таблиц).
* * Примечания:
   * Использовать SQLAlchemy сессии для управления транзакциями.
   * Рассмотреть использование alembic для миграций схемы БД в будущем.
   * Для SQLite путь к файлу БД должен быть конфигурируемым через config.py.
   * Функции должны принимать объект сессии db: Session как аргумент.
* backend/data_logic.py
* Назначение: Бизнес-логика, связанная с обработкой данных (категории, рейтинги, лидерборды), не требующая прямого взаимодействия с LLM.
* Содержание:
   * Функция get_categories(): Возвращает структуру категорий и подкатегорий для отображения в UI (может быть жестко закодирована или загружаться из конфига).
   * Функция process_and_save_rating(db: Session, rating_data: schemas.RatingInput): Принимает данные оценки от API, возможно, выполняет дополнительную обработку (например, хеширование промта), затем вызывает database.create_rating.
   * Функция generate_leaderboard(db: Session, category: Optional[str] = None): Вызывает database.get_aggregated_leaderboard_data, обрабатывает полученные сырые данные (например, вычисляет средний рейтинг, количество оценок) и формирует финальную структуру данных для ответа API.
* * Зависимости: database.py, config.py (для Pydantic схем).
* Примечания:
   * Разделяет логику агрегации/обработки от прямого доступа к БД.
   * Может содержать вспомогательные функции (например, для хеширования промтов).
* backend/models_io.py
* Назначение: Инкапсуляция всей логики взаимодействия с моделями Hugging Face.
* Содержание:
   * Функция list_available_models(category: Optional[str] = None): Получает список моделей с Hugging Face Hub, возможно, с фильтрацией по тегам/категориям (используя huggingface_hub). Может включать кеширование.
   * Функция run_single_inference(model_id: str, prompt: str): Загружает модель (если используется transformers) или формирует запрос к Inference API. Отправляет промт, обрабатывает ответ. Включает обработку ошибок (модель не найдена, ошибка инференса).
   * Функция run_comparison_inference(model_id_1: str, model_id_2: str, prompt: str): Вызывает run_single_inference для обеих моделей (возможно, асинхронно/параллельно), возвращает оба результата.
   * Вспомогательные функции для форматирования промта под конкретные модели (если требуется).
* * Зависимости: huggingface_hub, transformers или requests, config.py (для токена HF).
* Примечания:
   * Четко определить, используется ли локальный инференс (transformers) или Inference API. Это повлияет на зависимости и требования к ресурсам.
   * Реализовать обработку таймаутов и ошибок от HF API/моделей.
* backend/main.py
* Назначение: Точка входа в бэкенд, определение API эндпоинтов, оркестрация запросов, раздача статики.
* Содержание:
   * Инициализация FastAPI приложения: app = FastAPI().
   * Настройка CORS (если фронтенд будет раздаваться отдельно).
   * Монтирование статической директории: app.mount("/static", StaticFiles(directory="../frontend/static"), name="static") (примерный путь, уточнить).
   * Определение корневого эндпоинта (@app.get("/")) для отдачи frontend/index.html (используя FileResponse).
   * Определение API эндпоинтов:
      * GET /api/categories: Вызывает data_logic.get_categories.
      * GET /api/models: Вызывает models_io.list_available_models.
      * GET /api/leaderboard: Вызывает data_logic.generate_leaderboard.
      * POST /api/interact: Принимает model_id, prompt. Вызывает models_io.run_single_inference.
      * POST /api/compare: Принимает model_id_1, model_id_2, prompt. Вызывает models_io.run_comparison_inference.
      * POST /api/rate: Принимает данные оценки. Вызывает data_logic.process_and_save_rating.
   *    * Использование Pydantic моделей (из config.py или определенных здесь) для валидации тел запросов и форматирования ответов.
   * Обработка зависимостей FastAPI (например, для получения сессии БД: db: Session = Depends(get_db)).
   * Глобальные обработчики исключений (опционально).
* * Зависимости: fastapi, uvicorn, pydantic, backend.config, backend.database, backend.data_logic, backend.models_io.
* Примечания:
   * Этот файл связывает все части бэкенда. Логика внутри эндпоинтов должна быть минимальной – в основном вызовы функций из других модулей.
   * Тщательно продумать Pydantic модели для API – это контракт с фронтендом.
* Фронтенд (frontend/)
frontend/index.html
* Назначение: Единственная HTML-страница приложения (SPA).
* Содержание:
   * Стандартная структура HTML5.
   * <head>: Заголовок (<title>), мета-теги, ссылки на CDN CSS-фреймворка (Tailwind/Bootstrap), ссылка на кастомные стили (css/style.css), ссылки на CDN JS библиотек (Ace/Monaco).
   * <body>: Основные блоки разметки с уникальными ID для управления через JS:
      * <div id="app-container"> (основной контейнер)
         * <aside id="sidebar"> (для категорий и моделей)
         * <main id="main-content"> (для чата или сравнения)
            * <div id="chat-area-single"> / <div id="chat-area-compare-1">, <div id="chat-area-compare-2">
            * <input id="prompt-input">
            * <button id="send-button">
         *          * <section id="output-area"> (нижняя область)
            * <div id="code-visualizer"> (для рендеринга HTML)
            * <div id="code-editor"> (для Ace/Monaco)
            * (Кнопки для переключения режимов визуализатор/редактор)
         *       *    *    * Подключение основного JS файла в конце <body>: <script src="/static/js/script.js"></script>.
* * Примечания:
   * Использовать семантическую разметку.
   * Минимизировать статический контент, фокусируясь на структуре контейнеров.
   * Все пути к статике (/static/...) должны соответствовать тому, как они настроены в backend/main.py.
* frontend/css/style.css
* Назначение: Кастомные стили, дополняющие или переопределяющие CSS-фреймворк.
* Содержание:
   * Стили для специфичных элементов UI (чат-пузыри, подсветка выбранных элементов, внешний вид редактора/визуализатора).
   * Корректировка лэйаута, если требуется.
   * Анимации переходов (например, при переключении режимов).
   * Возможно, определение CSS-переменных для тем.
* * Примечания:
   * Стараться максимально использовать утилиты CSS-фреймворка прямо в HTML.
   * Держать CSS организованным, использовать комментарии.
* frontend/js/script.js
* Назначение: Вся клиентская логика приложения.
* Содержание:
   * Строгий режим: 'use strict'; в начале файла.
   * Глобальные переменные/Состояние: let currentView = 'single';, let selectedModel1 = null;, let selectedModel2 = null;, let chatHistory = [];, let editorInstance = null; и т.д.
   * Ссылки на DOM-элементы: Получение элементов по ID (document.getElementById(...)) при загрузке скрипта.
   * Инициализация ( Функция, вызываемая при загрузке DOM (DOMContentLoaded). Выполняет:
      * Первичные API-запросы (fetchCategories, fetchInitialModels/Leaderboard).
      * Инициализацию редактора кода (Ace/Monaco) и привязку к <div id="code-editor">.
      * Установку обработчиков событий (setupEventListeners).
   *    * API-клиент: Функции-обертки для fetch, отправляющие запросы к бэкенд API (/api/...). Должны обрабатывать ответы (JSON) и ошибки сети/сервера.
      * async function fetchApi(url, options = {})
      * async function getCategories()
      * async function getModels(category = null)
      * async function sendPromptToModel(modelId, prompt)
      * async function sendComparisonPrompt(modelId1, modelId2, prompt)
      * async function postRating(ratingData)
   *    * Рендеринг UI: Функции для обновления DOM на основе данных:
      * renderSidebar(categories, models)
      * renderChatMessage(messageData, targetAreaId)
      * updateCodeVisualizer(htmlContent)
      * updateCodeEditor(codeContent, language)
      * switchToSingleView() / switchToCompareView()
   *    * Обработчики Событий: Функции, вызываемые при взаимодействии пользователя с UI:
      * handleCategoryClick(event)
      * handleModelSelect(event)
      * handleSendPrompt(event)
      * handleRatingSubmit(event, rating)
      * handleToggleOutputMode(event)
   *    * Логика Редактора/Визуализатора: Функции для взаимодействия с Ace/Monaco API (установить/получить контент, сменить язык) и для безопасного рендеринга HTML в code-visualizer (возможно, через iframe или DOMParser).
* * Примечания:
   * Это будет самый большой файл. Использовать функции, комментарии, возможно, группировку логики в объекты (const api = {...}; const ui = {...};) для поддержания читаемости.
   * Обеспечить обратную связь пользователю при загрузке данных и ошибках API.
   * Тщательно обрабатывать пользовательский ввод и ответы моделей перед отображением (санитизация).
* Конфигурация и Запуск
Dockerfile
* Назначение: Описание процесса сборки Docker-образа приложения.
* Содержание:
   * Выбор базового образа Python (FROM python:3.10-slim).
   * Установка рабочей директории (WORKDIR /app).
   * Копирование requirements.txt и установка зависимостей (RUN pip install --no-cache-dir -r requirements.txt).
   * Копирование папок backend и frontend в образ (COPY ./backend ./backend, COPY ./frontend ./frontend).
   * Указание порта для прослушивания (EXPOSE 8000).
   * Команда запуска FastAPI приложения (CMD ["uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8000"]).
* * Примечания: Убедиться, что пути копирования (COPY) верны относительно контекста сборки Docker.
docker-compose.yml
* Назначение: Упрощение запуска и управления контейнером.
* Содержание:
   * Определение сервиса app.
   * Указание на сборку образа из текущей директории (build: .).
   * Проброс портов (ports: - "8000:8000").
   * Подключение тома для сохранения данных БД (если используется SQLite): (volumes: - ./data:/app/data). Папка data должна быть создана локально и добавлена в .gitignore.
   * Подключение файла переменных окружения (env_file: - .env).
* * Примечания: Делает запуск таким же простым, как docker-compose up.
requirements.txt
* Назначение: Список Python зависимостей бэкенда.
* Содержание:
   * fastapi
   * uvicorn[standard]
   * python-dotenv
   * pydantic
   * sqlalchemy (или другой драйвер/ORM)
   * psycopg2-binary (если используется PostgreSQL)
   * huggingface_hub
   * transformers (если локальный инференс)
   * requests (если HF Inference API)
   * aiofiles (для асинхронной отдачи файлов FastAPI)
   * python-multipart (для обработки форм, если понадобится)
* * Примечания: Рекомендуется фиксировать версии (==X.Y.Z) для воспроизводимости сборки.
.env
* Назначение: Хранение секретов и конфигурации окружения.
* Содержание:
   * HUGGING_FACE_HUB_TOKEN=hf_YOUR_TOKEN_HERE
   * DATABASE_URL=sqlite+aiosqlite:///./data/prompt_arena.db (Пример для async SQLite)
   * # DATABASE_URL=postgresql+asyncpg://user:password@host:port/dbname (Пример для async PostgreSQL)
* * Примечания: Обязательно добавить .env в .gitignore. Предоставить .env.example с заглушками вместо реальных значений.
________________


4. Инструкции по Запуску
1. Установить Docker и Docker Compose.
2. Клонировать репозиторий: git clone ...
3. Создать файл  Скопировать .env.example в .env и заполнить необходимые значения (как минимум, HUGGING_FACE_HUB_TOKEN, если требуется).
4. Создать папку  (если используется SQLite и настроен volume в docker-compose.yml): mkdir data
5. Собрать и запустить контейнер:
   * Первый запуск: docker-compose up --build -d
   * Последующие запуски: docker-compose up -d
6. 7. Открыть приложение в браузере: http://localhost:8000
8. Остановка: docker-compose down
________________


5. Руководство по Доработке
* Бэкенд: Для изменения логики в module_X.py (где X - models_io, data_logic, database, config), предоставьте ИИ-ассистенту файлы backend/main.py и backend/module_X.py. main.py содержит необходимый контекст API и вызовов.
* Фронтенд: Для изменения UI или клиентской логики, предоставьте ИИ-ассистенту backend/main.py (для понимания API) и файлы из папки frontend/ (index.html, css/style.css, js/script.js).
* Зависимости: При добавлении Python-зависимостей, обновите requirements.txt. При добавлении JS/CSS библиотек, используйте CDN или добавьте их в frontend/static и обновите index.html и, возможно, Dockerfile и backend/main.py (если пути к статике меняются).
* База Данных: При изменении схемы БД (database.py), может потребоваться ручное удаление файла БД (для SQLite) или использование системы миграций (например, Alembic) для PostgreSQL.
* Тестирование: После внесения изменений, перезапустите контейнер (docker-compose down && docker-compose up --build) и тщательно протестируйте функциональность в браузере.