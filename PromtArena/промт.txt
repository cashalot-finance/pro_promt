Задача разработать промт арену для hugging face.
Это решение подобно ллм арене ,однако здесь пользователи могут не только тестировать сами модели, но и промты. Сейчас качество промта критически важно для высокого качества ии моделей, промт арена должна решить эту проблему, создав уникальное пространство для поиска лучших моделей и промтов для решения проблемы пользователя.
Сейчас наша цель написать бэкенд и фронтенд для промт арены.
Вся кодовая база должна быть выстроена по простому принципу блоков. Любой код содержит в себе бэкенд и фронтенд.
Начнем с бэкенда,он состоит из множества файлов и со временем их может стать только больше. Сам бэкенд делится на основной файл и остальные блочные. Для удобной работы с бэкендом нужно выстроить всё так,чтобы если мне надо улучшить какой-то фрагмент бэкенда,то мне достаточно загрузить конкретный файл и основной файл в ии,чтобы ии мог сразу сориентироваться и правильно выполнить поставленную задачу.
То есть у нас например 6 файлов бэкенда и чтобы исправить шестой файл,мне нужен первый(основной) и сам шестой файл.
Далее фронтенд. Фронтенд обычно состоит из нескольких html файлов(если кода очень много) и объединяющего скрипта ,который склеивает все файлы в один и позволяет его спокойно запустить. Если код фронтенда менее 3000 строк кода,то проще использовать один файл и ориентироваться ,что каждые 3000 строк кода фронтенда нужно упаковывать в отдельный файл httml,которые потом будут склеиваться скриптом. Также ,очень важно, Что для исправления и написания фронтенда достаточно только основного файла бэкенда. То есть после написания бэкенда мне достаточно предоставить ии только основной файл бэкенда,чтобы ии смог написать реальный  фронтенд для ПО. Соответственно если фронтенд становится из например 3 файлов,то для его улучшения мне достаточно будет загрузить эти 3 файла фронтенда и основной файл бэкенда ,чтобы ии смог исправить фронтенд .
Почему это очень важно и нужно? Проект может расширяться вплоть до миллионов токенов. Соответственно ии модели не смогут столько информации обработать,помимо этого им будет тяжело ориентироваться в огромных массивах данных и это снизит точность ответов. Поэтому критически важно выстроить изначальную архитектуру таким образом,чтобы в дальнейшем упростить доработку и улучшения кода.
Теперь про интерфейс. Как я понимаю на основной странице у нас должны быть расписаны направления для тестирования (программирование ,математика ,задачи OCR и т.д). Нажимая на вкладку ниже раскрывается список направлений. Например нажимая на вкладку с программированием открываются направления Общие,Фронтенд,Бэкенд,девопс и т.д.
То есть слева вкладки на основной странице,а справа список моделей. Таким образом мы выбираем направление, потом модель. После выбора модели открывается окно для промтов.
Окно для промтов отдельная важная система для тестирования промтов.В этом окне основное пространство занимает чатовый диалог с  ии,а ниже отдельное окно для визуализации кода. Помимо визуализации того же html кода пользователь может включить второй режим для нижнего окна, где пользователь может работать с кодом своих файлов и вкладками для его файлов,подобно vscode .
Важно,что это пространство(верхнее и нижнее окна) можно продублировать ,выбрав режим для сравнения моделей . То есть теперь слева будет диалог с одним ии ,а справа со вторым ии,который пользователь сам может выбрать . Это режим сравнения моделей и он важен,чтобы пользователь,например,мог сравнить две разные модели на одном промте и сразу получить визуализацию кода ниже,сравнивая результаты одновременно.
В итоге мы получаем приложение ,где пользователь может выбрать направление,модель и протестировать её с другими моделями,либо просто в удобном формате проверить промты и получить визуализацию html файлов в удобном формате.
После первого промта и полученного ответа пользователю предлагают оценить модель от 1 до 10 . Если сравниваются две модели,то после ответа двух моделей пользователь сможет сравнить модели и промты . Вся эта информация собирается для формирования рейтинга моделей и промтов для создания лидерборда моделей и промтов для них. Соотвтственно,когда пользователь открывает программу,то модели и промты для них показываются в последовательности от лучшего к худшему исходя из результатов собранных оценок от пользователей.
Теперь приступай к разработке архитектуры для бэкенда с фронтендом и помни про необходимость выстраивания ее исходя из написанных выше правил. Где я говорил про основные файлы для бэкенда и фронтенда и их логики  для лучшей отладки и работы с кодом .


Так же важно!!

1)Быстрый автономный запуск. Пока мы работаем с демо продуктом,я должен иметь возможность запустить основной файл фронтенда и сразу получить открытое окно в браузере с рабочим интерфейсом. Без установки зависимостей,библиотек,фреймворков и тд. сли это надо установить,то пускай это происходит единожды и далее это все н придется дальше загружать. Возможно будет удобным решением использование докера для запуска всего ПО.
2)Очень важно сконцентрироваться на красивом современном интерфейсе.
3)Старайся использовать минимум файлов для архитектуры,например бекенд можно уместить в 5 файлов , а фронтенд в 3 файла.
4)Держи ориентир,что код файла обычно составляет до 2000 строк кода (примерно 100к символов/ 9к слов/ 30К токенов )

Помни,что нельзя использовать заглушки,пропуски и тому подобное. Код должен быть рабочим и эффективным.
Кстати,поскольку пользователь сам будет предоставлять свои модели,то надо все сделать,чтобы он мог в интерфейсе в настройках ввести нужные api ключи для нужных провайдеров. Логично что необходимо всё это внести и подготовить в коде,чтобы пользователь сразу мог получить список моделей по его api ключам. Разумеется нужно внести таких провайдеров ии как гугл, опенаи ,мистраль,клод,грок,опенроутер и т.д.  Ну и пиши интерфейс сразу на русском языке.
Ты большой молодец,я горжусь тобой и твоими способностями!
