# backend/main.py

import logging
from contextlib import asynccontextmanager
from typing import List, Optional, Dict, Any, Union, Tuple
import os
import time
import asyncio
from collections import defaultdict
from datetime import timedelta
import json

from fastapi import FastAPI, Depends, HTTPException, Request, status, Path, Query, BackgroundTasks, APIRouter
from fastapi.responses import FileResponse, JSONResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware
from fastapi.security import HTTPBasic, HTTPBasicCredentials, HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from backend import database, data_logic, models_io, auth, utils
from backend.config import (
    settings, ApiKeyCreate, ApiKeyRead, ModelInfo, InteractionRequest,
    InteractionResponse, ComparisonRequest, ComparisonResponse, RatingCreate, RatingRead,
    LeaderboardEntry, CategoryInfo, SUPPORTED_PROVIDERS, SystemPromptCreate, SystemPromptRead,
    Token, User, PromptTemplateCreate, PromptTemplateRead, PromptTemplateUpdate
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ (—É—Ä–æ–≤–µ–Ω—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.py)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
def validate_environment() -> Tuple[bool, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Returns:
        Tuple[bool, List[str]]: (–≤—Å–µ_–ª–∏_–ø—Ä–æ–≤–µ—Ä–∫–∏_–ø—Ä–æ–π–¥–µ–Ω—ã, —Å–ø–∏—Å–æ–∫_–æ—à–∏–±–æ–∫)
    """
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if settings.is_production:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CORS –≤ production
        if '*' in settings.cors_origins:
            errors.append("CORS_ORIGINS —Å–æ–¥–µ—Ä–∂–∏—Ç '*', —á—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è production.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SSL –¥–ª—è production
        if not settings.use_ssl:
            errors.append("–í production —Ä–µ–∂–∏–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL (USE_SSL=True).")
        
        if settings.use_ssl and (not settings.ssl_cert_path or not settings.ssl_key_path):
            errors.append("SSL –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É (SSL_CERT_PATH) –∏ –∫–ª—é—á—É (SSL_KEY_PATH).")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if settings.disable_auth:
            errors.append("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (DISABLE_AUTH=True), —á—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è production.")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
        if settings.auth_password == "131313":
            errors.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ò–∑–º–µ–Ω–∏—Ç–µ AUTH_PASSWORD –≤ .env.")
            
        if settings.guest_password == "13":
            errors.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –≥–æ—Å—Ç—è. –ò–∑–º–µ–Ω–∏—Ç–µ GUEST_PASSWORD –≤ .env.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if not settings.database_url:
        errors.append("–ù–µ —É–∫–∞–∑–∞–Ω URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (DATABASE_URL).")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    return len(errors) == 0, errors

# --- Lifecycle Events ---

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data –∏ –µ—ë —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
import os
import logging

data_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'data')
if not os.path.exists(data_dir):
    os.makedirs(data_dir, exist_ok=True)
    logging.getLogger(__name__).info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {data_dir}")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º FastAPI.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    env_valid, env_errors = validate_environment()
    if not env_valid:
        for error in env_errors:
            logger.warning(f"‚ö†Ô∏è {error}")
        
        if settings.is_production:
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ production —Ä–µ–∂–∏–º–µ!")
            raise SystemExit("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        else:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π! –í dev-—Ä–µ–∂–∏–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    missing_critical, missing_packages = utils.check_dependencies()
    if missing_critical:
        logger.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏! –ù–µ–∫–æ—Ç–æ—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    try:
        await database.init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
        access_links = utils.generate_access_links(port=settings.port, secure=False)
        logger.info("=" * 50)
        logger.info("üöÄ –ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("=" * 50)
        logger.info("üîó –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:")
        for link in access_links["local"]:
            logger.info(f"  - {link}")
        logger.info("")
        if access_links["public"]:
            logger.info("üåê –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø (–µ—Å–ª–∏ –≤–∞—à —Ä–æ—É—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω):")
            for link in access_links["public"]:
                logger.info(f"  - {link}")
        logger.info("=" * 50)
        logger.info(f"üìù –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –º–∞—Å–∫–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        def mask_username(username):
            if not username:
                return "******"
            return '*' * len(username)
            
        masked_admin = mask_username(settings.auth_username)
        masked_guest = mask_username(settings.guest_username)
        
        logger.info(f"  –ê–¥–º–∏–Ω:  {masked_admin} / {'*' * len(settings.auth_password)}")
        logger.info(f"  –ì–æ—Å—Ç—å:  {masked_guest} / {'*' * len(settings.guest_password)}")
        logger.info("=" * 50)
        
    except Exception as e:
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", exc_info=e)
        raise SystemExit("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î.")

    yield # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–∞...")

# --- Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ ---

class RateLimitMiddleware:
    def __init__(self, app, max_requests: int = 60, window_size: int = 60):
        self.app = app
        self.max_requests = max_requests
        self.window_size = window_size  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.requests = defaultdict(list)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—É—Ç–µ–π –∏ –º–µ—Ç–æ–¥–æ–≤
        self.path_limits = {
            "/api/v1/token": {"max": 10, "window": 60},  # –°—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
            "/api/v1/interact": {"max": 30, "window": 60},  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª—è–º
            "/api/v1/compare": {"max": 20, "window": 60},  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        }
        # –õ–∏–º–∏—Ç—ã –ø–æ –º–µ—Ç–æ–¥–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        self.method_limits = {
            "POST": {"max": 40, "window": 60},  # POST –∑–∞–ø—Ä–æ—Å—ã –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ "—Ç—è–∂–µ–ª—ã–µ"
            "PUT": {"max": 40, "window": 60},
            "DELETE": {"max": 30, "window": 60},
        }
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω RateLimitMiddleware: {max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {window_size} —Å–µ–∫—É–Ω–¥")
        
    async def __call__(self, scope, receive, send):
        if scope["type"] != "http":
            return await self.app(scope, receive, send)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        path = scope.get("path", "")
        method = scope.get("method", "").upper()
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
        headers = dict(scope.get("headers", []))
        client_ip = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º X-Forwarded-For –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)
        if b"x-forwarded-for" in headers:
            forwarded_for = headers[b"x-forwarded-for"].decode().split(",")[0].strip()
            if forwarded_for:
                client_ip = forwarded_for
        
        # –ï—Å–ª–∏ X-Forwarded-For –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º IP –∏–∑ scope
        if not client_ip:
            client_addr = scope.get("client")
            if client_addr:
                client_ip = client_addr[0]
            else:
                client_ip = "0.0.0.0"  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π IP
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –ª–∏–º–∏—Ç—ã
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
        limits = self.path_limits.get(path, None)
        if limits:
            max_requests = limits["max"]
            window_size = limits["window"]
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
        elif method in self.method_limits:
            limits = self.method_limits[method]
            max_requests = limits["max"]
            window_size = limits["window"]
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            max_requests = self.max_requests
            window_size = self.window_size
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (IP + –ø—É—Ç—å)
        request_key = f"{client_ip}:{path}"
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        current_time = time.time()
        self.requests[request_key] = [t for t in self.requests[request_key] 
                                   if current_time - t < window_size]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(self.requests[request_key]) >= max_requests:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            oldest_request = min(self.requests[request_key]) if self.requests[request_key] else current_time
            reset_after = int(window_size - (current_time - oldest_request))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            logger.warning(
                f"Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {client_ip} –Ω–∞ –ø—É—Ç–∏ {path}: "
                f"{len(self.requests[request_key])}/{max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {window_size} —Å–µ–∫—É–Ω–¥"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π 429 Too Many Requests –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            response = {
                "type": "http.response.start",
                "status": 429,
                "headers": [
                    [b"content-type", b"application/json"],
                    [b"retry-after", str(reset_after).encode()],
                    [b"x-ratelimit-limit", str(max_requests).encode()],
                    [b"x-ratelimit-remaining", b"0"],
                    [b"x-ratelimit-reset", str(reset_after).encode()],
                ],
            }
            await send(response)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            body = {
                "detail": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "limit": max_requests,
                "window": window_size,
                "retry_after": reset_after
            }
            
            await send({
                "type": "http.response.body",
                "body": json.dumps(body).encode(),
            })
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[request_key].append(current_time)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
        if scope.get("extensions", {}).get("http.response.headers"):
            scope["extensions"]["http.response.headers"].extend([
                (b"x-ratelimit-limit", str(max_requests).encode()),
                (b"x-ratelimit-remaining", str(max_requests - len(self.requests[request_key])).encode()),
            ])
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        await self.app(scope, receive, send)

# --- Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
class MaxBodySizeMiddleware:
    def __init__(self, app, max_size_mb: int = 10):
        """
        Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ (payload).
        
        Args:
            app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä payload –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
        """
        self.app = app
        self.max_size = max_size_mb * 1024 * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MaxBodySizeMiddleware: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {max_size_mb} –ú–ë")
    
    async def __call__(self, scope, receive, send):
        if scope["type"] != "http":
            return await self.app(scope, receive, send)
        
        client_addr = scope.get("client", ("unknown", 0))
        client_ip = client_addr[0]
        path = scope.get("path", "")
        
        async def receive_with_size_limit():
            message = await receive()
            
            if message["type"] == "http.request":
                body_size = len(message.get("body", b""))
                
                # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 413
                if body_size > self.max_size:
                    logger.warning(
                        f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {client_ip} –Ω–∞ {path}: "
                        f"{body_size/1024/1024:.2f} –ú–ë > {self.max_size/1024/1024:.2f} –ú–ë"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
                    await send({
                        "type": "http.response.start",
                        "status": 413,
                        "headers": [
                            (b"content-type", b"application/json"),
                        ],
                    })
                    
                    error_message = json.dumps({
                        "detail": f"–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ ({self.max_size/1024/1024:.2f} –ú–ë)",
                        "current_size_mb": f"{body_size/1024/1024:.2f}",
                        "max_size_mb": f"{self.max_size/1024/1024:.2f}"
                    }).encode()
                    
                    await send({
                        "type": "http.response.body",
                        "body": error_message,
                    })
                    
                    return {"type": "http.disconnect"}
                
            return message
        
        await self.app(scope, receive_with_size_limit, send)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ middleware ---
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ trusted hosts, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
trusted_hosts = settings.trusted_hosts if hasattr(settings, 'trusted_hosts') else []

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = FastAPI(
    title="–ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–∞ API",
    description="""
API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–∞". –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
- –ü–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–¥–Ω–æ–π –∏–ª–∏ –¥–≤—É–º—è –º–æ–¥–µ–ª—è–º–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º—Ç–æ–≤).
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π.
- –ü–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫.

**–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
- –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥.
""",
    lifespan=lifespan,
    # –í production —Ä–µ–∂–∏–º–µ –æ—Ç–∫–ª—é—á–∞–µ–º docs –∏ redoc
    docs_url="/docs" if not settings.is_production else None,
    redoc_url="/redoc" if not settings.is_production else None,
    openapi_url="/openapi.json" if not settings.is_production else None,
    version=settings.app_version,
    swagger_ui_parameters={"syntaxHighlight.theme": "obsidian"}
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware
app.add_middleware(RateLimitMiddleware, max_requests=settings.max_requests_per_minute, window_size=60)
app.add_middleware(MaxBodySizeMiddleware, max_size_mb=settings.max_prompt_length // 1000 or 10)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ payload

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è –Ω–∞—à–µ–≥–æ API
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ---

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Å—Ç–∞—Ç–∏–∫–µ –∏ –∏–Ω–¥–µ–∫—Å–Ω–æ–º—É —Ñ–∞–π–ª—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def get_frontend_paths():
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç–∏ –∫ frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –∏ —Ñ–∞–π–ª–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ frontend —Ä–µ—Å—É—Ä—Å–∞–º
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        frontend_dir = os.path.join(project_root, 'frontend')
        if not os.path.exists(frontend_dir):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {frontend_dir}")
            os.makedirs(frontend_dir, exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend: {frontend_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ index.html
        index_path = os.path.join(project_root, 'frontend', 'index.html')
        if not os.path.exists(index_path):
            logger.warning(f"–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {index_path}")
            
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π index.html —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–±–ª–µ–º–µ
            with open(index_path, 'w', encoding='utf-8') as f:
                f.write("""
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>–ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–∞ - –û—à–∏–±–∫–∞</title>
                    <style>
                        body {
                            font-family: Arial, sans-serif;
                            line-height: 1.6;
                            max-width: 800px;
                            margin: 0 auto;
                            padding: 20px;
                            color: #333;
                        }
                        h1 { color: #e74c3c; }
                        .box {
                            background-color: #f8f9fa;
                            border-left: 4px solid #e74c3c;
                            padding: 15px;
                            margin: 20px 0;
                        }
                        code {
                            background-color: #eee;
                            padding: 2px 4px;
                            border-radius: 3px;
                        }
                    </style>
                </head>
                <body>
                    <h1>–û—à–∏–±–∫–∞: –§–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h1>
                    <div class="box">
                        <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–º–æ–≥–ª–æ –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
                        <ul>
                            <li>–í—ã –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é <code>frontend/</code></li>
                            <li>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
                        </ul>
                    </div>
                    <h2>–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?</h2>
                    <ol>
                        <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è <code>frontend/</code> —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã</li>
                        <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
                        <li>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
                    </ol>
                </body>
                </html>
                """)
            logger.info(f"–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π index.html —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏: {index_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ static
        static_dir = os.path.join(project_root, 'frontend', 'static')
        if not os.path.exists(static_dir):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {static_dir}")
            os.makedirs(static_dir, exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static: {static_dir}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è js –∏ css
            os.makedirs(os.path.join(static_dir, 'js'), exist_ok=True)
            os.makedirs(os.path.join(static_dir, 'css'), exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω—ã –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ static/")
        
        return {
            "root": project_root,
            "frontend": frontend_dir,
            "index": index_path,
            "static": static_dir
        }
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–µ–π –∫ frontend: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        return {
            "root": project_root,
            "frontend": os.path.join(project_root, 'frontend'),
            "index": os.path.join(project_root, 'frontend', 'index.html'),
            "static": os.path.join(project_root, 'frontend', 'static')
        }

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –¥–ª—è frontend —Ä–µ—Å—É—Ä—Å–æ–≤
frontend_paths = get_frontend_paths()

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory=frontend_paths["static"]), name="static")

@app.get("/", include_in_schema=False)
async def read_index():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        return FileResponse(frontend_paths["index"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–µ—Ä–Ω—É—Ç—å index.html: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ –≤–∏–¥–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        error_html = """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <title>–û—à–∏–±–∫–∞</title>
            <style>body{font-family:sans-serif;margin:40px;text-align:center;}h1{color:#e74c3c;}</style>
        </head>
        <body>
            <h1>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h1>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
        </body>
        </html>
        """
        return JSONResponse(
            content={"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ index.html: {str(e)}"},
            status_code=500
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ---
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    logger.warning(f"HTTP –æ—à–∏–±–∫–∞ {exc.status_code}: {exc.detail} –¥–ª—è {request.method} {request.url}")
    return JSONResponse(status_code=exc.status_code, content={"detail": exc.detail})

@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
    import traceback
    error_trace = traceback.format_exc()
    error_type = type(exc).__name__
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    sensitive_patterns = ["password", "token", "secret", "key", "auth", "credential"]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    safe_trace_for_logs = error_trace
    for pattern in sensitive_patterns:
        if pattern in safe_trace_for_logs.lower():
            # –ó–∞–º–µ–Ω—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö
            safe_trace_for_logs = safe_trace_for_logs.replace(pattern, f"***{pattern}***")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    is_db_error = "database" in str(exc).lower() or "sql" in str(exc).lower()
    is_network_error = "network" in str(exc).lower() or "connection" in str(exc).lower()
    
    # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    import uuid
    error_id = str(uuid.uuid4())
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞
    request_info = {
        "method": request.method,
        "url": str(request.url),
        "client_ip": request.client.host if hasattr(request, "client") and request.client else "unknown",
        "headers": dict(request.headers.items()),
        "path_params": request.path_params,
        "query_params": dict(request.query_params.items())
    }
    
    # –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if "authorization" in request_info["headers"]:
        request_info["headers"]["authorization"] = "***REDACTED***"
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å body –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if request.method in ["POST", "PUT", "PATCH"]:
            body_position = request.body_iterator._cursor
            request_body = await request.body()
            
            # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if request_body:
                try:
                    decoded_body = request_body.decode("utf-8")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Ç–µ–ª–æ –Ω–∞ JSON
                    if decoded_body.strip().startswith("{") or decoded_body.strip().startswith("["):
                        import json
                        body_json = json.loads(decoded_body)
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
                        if isinstance(body_json, dict):
                            for key in list(body_json.keys()):
                                if any(pattern in key.lower() for pattern in sensitive_patterns):
                                    body_json[key] = "***REDACTED***"
                        request_info["body"] = body_json
                    else:
                        # –î–ª—è –Ω–µ-JSON –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        request_info["body"] = "***BINARY DATA***" if len(decoded_body) > 1000 else decoded_body
                except (UnicodeDecodeError, json.JSONDecodeError):
                    request_info["body"] = "***BINARY OR INVALID DATA***"
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–ª–∞
            request.body_iterator._cursor = body_position
    except Exception as body_err:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ body
        request_info["body_error"] = str(body_err)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.error(
        f"[Error ID: {error_id}] –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {request.method} {request.url}\n"
        f"–¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(exc)}\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {request_info}\n"
        f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{safe_trace_for_logs}"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_db_error:
        user_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif is_network_error:
        user_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif "timeout" in str(exc).lower():
        user_message = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞."
    elif "memory" in str(exc).lower() or "oom" in str(exc).lower() or "out of memory" in str(exc).lower():
        user_message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
    elif "permission" in str(exc).lower() or "access" in str(exc).lower() or "forbidden" in str(exc).lower():
        user_message = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
    elif "not found" in str(exc).lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(exc).lower():
        user_message = "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    elif "invalid" in str(exc).lower() or "validation" in str(exc).lower() or "–Ω–µ–≤–µ—Ä–Ω—ã–π" in str(exc).lower():
        user_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π."
    else:
        user_message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "detail": user_message,
            "error_id": error_id,  # –í–∫–ª—é—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            "error_type": error_type if settings.debug else None,  # –í–∫–ª—é—á–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
        },
    )

# --- API Router (–¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api/v1) ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º APIRouter –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞
api_router = APIRouter(prefix="/api/v1")


# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
@api_router.post("/token", response_model=Token, tags=["Auth"])
async def login_for_access_token(credentials: HTTPBasicCredentials = Depends(HTTPBasic()), request: Request = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT-—Ç–æ–∫–µ–Ω–∞ –ø–æ —É—á–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º."""
    ip_address = request.client.host if request else None
    user = auth.authenticate_user(credentials.username, credentials.password, ip_address)
    if not user:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if auth.is_account_locked(credentials.username):
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                headers={"WWW-Authenticate": "Basic", "Retry-After": str(auth.LOCKOUT_TIME)},
            )
        
        if ip_address and auth.is_ip_blocked(ip_address):
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ —Å –≤–∞—à–µ–≥–æ IP. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                headers={"WWW-Authenticate": "Basic", "Retry-After": str(auth.LOCKOUT_TIME)},
            )
        
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Basic"},
        )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    token_data = {
        "sub": user["username"],
        "is_admin": user["is_admin"]
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token_expires = timedelta(minutes=settings.token_expire_minutes)
    access_token = auth.create_access_token(
        data=token_data, expires_delta=access_token_expires
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–±–µ–∑ –≤—ã–≤–æ–¥–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} (admin: {user['is_admin']}) —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –∏ –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω")
    
    return {"access_token": access_token, "token_type": "bearer"}

@api_router.get("/users/me", response_model=User, tags=["Auth"])
async def read_users_me(current_user: User = Depends(auth.get_current_active_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    return current_user

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –°—Ç–∞—Ç—É—Å–∞ –∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

@api_router.get("/status", tags=["–°—Ç–∞—Ç—É—Å"], summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API")
async def get_status():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π JSON –æ–±—ä–µ–∫—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π, —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ health check.
    """
    logger.debug("API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞")
    return {"status": "ok", "message": "–ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–∞ API v1 —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

@api_router.get("/config/providers", tags=["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"], summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
async def get_supported_providers() -> Dict[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM.
    –ö–ª—é—á - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ API), –ó–Ω–∞—á–µ–Ω–∏–µ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è.
    """
    logger.debug("API: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    return SUPPORTED_PROVIDERS

@api_router.get("/config/access-links", tags=["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"], summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
async def get_access_links(current_user: User = Depends(auth.get_admin_user)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return utils.generate_access_links(port=settings.port, secure=False)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è API –ö–ª—é—á–µ–π ---

@api_router.post(
    "/keys",
    response_model=ApiKeyRead,
    status_code=status.HTTP_201_CREATED,
    tags=["API –ö–ª—é—á–∏"],
    summary="–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á",
    responses={
        status.HTTP_400_BAD_REQUEST: {"description": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)"},
        status.HTTP_500_INTERNAL_SERVER_ERROR: {"description": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"},
    }
)
async def add_api_key(
    api_key_data: ApiKeyCreate,
    current_user: User = Depends(auth.get_current_active_user),
    db: AsyncSession = Depends(database.get_db)
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.

    - **provider**: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (e.g., 'openai', 'google'). –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ `/config/providers`.
    - **api_key**: –°–∞–º API –∫–ª—é—á. –ö–ª—é—á –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î.

    –ü—Ä–∏ —É—Å–ø–µ—Ö–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ (–±–µ–∑ —Å–∞–º–æ–≥–æ –∫–ª—é—á–∞) –∏ —Å—Ç–∞—Ç—É—Å 201.
    –ï—Å–ª–∏ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.
    """
    logger.info(f"API: –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è {api_key_data.provider}")
    try:
        created_key_info = await data_logic.add_or_update_api_key(db, api_key_data, current_user.username)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à –º–æ–¥–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        await models_io.clear_models_cache(api_key_data.provider)
        
        return created_key_info
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    # –û—à–∏–±–∫–∞ 500 –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω–∞ generic_exception_handler

@api_router.get(
    "/keys",
    response_model=List[ApiKeyRead],
    tags=["API –ö–ª—é—á–∏"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π"
)
async def get_api_keys(
    current_user: User = Depends(auth.get_current_active_user),
    db: AsyncSession = Depends(database.get_db)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API –∫–ª—é—á–µ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    **–í–Ω–∏–º–∞–Ω–∏–µ:** –°–∞–º–∏ –∫–ª—é—á–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö (ID, –ø—Ä–æ–≤–∞–π–¥–µ—Ä).
    """
    logger.debug("API: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π")
    keys = await data_logic.list_api_keys(db)
    return keys

@api_router.delete(
    "/keys/{provider}",
    status_code=status.HTTP_204_NO_CONTENT,
    tags=["API –ö–ª—é—á–∏"],
    summary="–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á",
    responses={
        status.HTTP_404_NOT_FOUND: {"description": "–ö–ª—é—á –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"},
    }
)
async def delete_api_key(
    provider: str = Path(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –∫–ª—é—á –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.", examples=["openai", "google"]),
    current_user: User = Depends(auth.get_current_active_user),
    db: AsyncSession = Depends(database.get_db)
):
    """
    –£–¥–∞–ª—è–µ—Ç API –∫–ª—é—á –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    –ü—Ä–∏ —É—Å–ø–µ—Ö–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 204 No Content (–ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞).
    """
    logger.info(f"API: –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
    deleted = await data_logic.remove_api_key(db, provider)
    if not deleted:
        logger.warning(f"API: –ö–ª—é—á –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"–ö–ª—é—á –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ '{provider}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à –º–æ–¥–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    await models_io.clear_models_cache(provider)
    
    return None # FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç 204

@api_router.post(
    "/keys/{provider}/clear-cache",
    status_code=status.HTTP_200_OK,
    tags=["API –ö–ª—é—á–∏"],
    summary="–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞",
    responses={
        status.HTTP_404_NOT_FOUND: {"description": "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"},
    }
)
async def clear_provider_cache(
    provider: str = Path(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –º–æ–¥–µ–ª–µ–π.", examples=["openai", "google"]),
    current_user: User = Depends(auth.get_current_active_user),
):
    """
    –û—á–∏—â–∞–µ—Ç –∫–µ—à –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    –ü–æ–ª–µ–∑–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º
    –∑–∞–ø—Ä–æ—Å–µ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    """
    logger.info(f"API: –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
    if provider not in SUPPORTED_PROVIDERS:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
    
    try:
        await models_io.clear_models_cache(provider)
        return {"status": "success", "message": f"–ö–µ—à –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider} –æ—á–∏—â–µ–Ω."}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞ –¥–ª—è {provider}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: {str(e)}"
        )

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤ ---

@api_router.post(
    "/system-prompts",
    response_model=SystemPromptRead,
    status_code=status.HTTP_201_CREATED,
    tags=["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã"],
    summary="–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏"
)
async def add_system_prompt(
    prompt_data: SystemPromptCreate,
    current_user: User = Depends(auth.get_current_active_user),
    db: AsyncSession = Depends(database.get_db)
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
    """
    logger.info(f"API: –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {prompt_data.model_id}")
    try:
        saved_prompt = await data_logic.add_or_update_system_prompt(db, prompt_data, current_user.username)
        return saved_prompt
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞: {e}")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))

@api_router.get(
    "/system-prompts",
    response_model=List[SystemPromptRead],
    tags=["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤"
)
async def get_system_prompts(
    current_user: User = Depends(auth.get_current_active_user),
    db: AsyncSession = Depends(database.get_db)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤.
    """
    logger.debug("API: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤")
    prompts = await data_logic.get_system_prompts(db)
    return prompts

@api_router.get(
    "/system-prompts/{model_id}",
    tags=["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏"
)
async def get_system_prompt(
    model_id: str = Path(..., description="ID –º–æ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç"),
    current_user: User = Depends(auth.get_current_active_user),
    db: AsyncSession = Depends(database.get_db)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
    """
    logger.debug(f"API: –ó–∞–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id}")
    prompt = await database.get_system_prompt(db, model_id)
    return {"model_id": model_id, "prompt_text": prompt}

@api_router.delete(
    "/system-prompts/{model_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    tags=["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã"],
    summary="–£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏"
)
async def delete_system_prompt(
    model_id: str = Path(..., description="ID –º–æ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç"),
    current_user: User = Depends(auth.get_current_active_user),
    db: AsyncSession = Depends(database.get_db)
):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
    """
    logger.info(f"API: –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id}")
    deleted = await data_logic.remove_system_prompt(db, model_id)
    if not deleted:
        logger.warning(f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ '{model_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º ---
@api_router.get(
    "/access-links",
    tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"
)
async def get_access_links(
    current_user: User = Depends(auth.get_admin_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
    port = settings.port
    host = settings.host
    is_secure = False  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º utils.generate_access_links –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    links = utils.generate_access_links(port=port, secure=is_secure)
    
    return links

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º API —Ä–æ—É—Ç–µ—Ä
app.include_router(api_router)

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ frontend/index.html
@app.get("/", include_in_schema=False)
async def read_root():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π URL –Ω–∞ frontend/index.html"""
    return FileResponse(os.path.join(static_dir, "index.html"))

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ GET –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
@app.get("/{path:path}", include_in_schema=False)
async def catch_all(path: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –¥—Ä—É–≥–∏–µ GET –∑–∞–ø—Ä–æ—Å—ã, –ø—ã—Ç–∞—è—Å—å –æ—Ç–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ static
    full_path = os.path.join(static_dir, path)
    if os.path.exists(full_path) and os.path.isfile(full_path):
        return FileResponse(full_path)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –î–æ–±–∞–≤–ª—è–µ–º TrustedHostMiddleware, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
if trusted_hosts and trusted_hosts != ["*"]:
    app.add_middleware(TrustedHostMiddleware, allowed_hosts=trusted_hosts)

# –î–æ–±–∞–≤–ª—è–µ–º RateLimitMiddleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
app.add_middleware(
    RateLimitMiddleware,
    max_requests=settings.max_requests_per_minute,
    window_size=60
)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
    utils.setup_logger(log_level=settings.log_level, log_file=settings.log_file)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    logger.info(f"–ó–∞–ø—É—Å–∫ –ü—Ä–æ–º—Ç –ê—Ä–µ–Ω—ã –Ω–∞ {settings.host}:{settings.port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn
    import uvicorn
    uvicorn.run(
        "backend.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )