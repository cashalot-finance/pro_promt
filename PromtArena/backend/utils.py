# backend/utils.py

import os
import sys
import time
import socket
import logging
import hashlib
import platform
import requests
import netifaces
from typing import Dict, Any, Optional, List, Union
from pathlib import Path

logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π ---

def ensure_directory_exists(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    try:
        os.makedirs(path, exist_ok=True)
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {path}: {e}")
        return False

def get_project_root() -> Path:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞."""
    return Path(__file__).parent.parent

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---

def get_ip_addresses() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö –∏ IP-–∞–¥—Ä–µ—Å–∞—Ö."""
    ip_info = {
        "local": [],
        "public": None,
        "hostname": socket.gethostname()
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º netifaces –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–æ–≤
        for interface in netifaces.interfaces():
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º loopback
                if interface == 'lo' or interface.startswith('lo'):
                    continue
                    
                addresses = netifaces.ifaddresses(interface)
                if netifaces.AF_INET in addresses:
                    for addr in addresses[netifaces.AF_INET]:
                        ip = addr['addr']
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ç–ª–µ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
                        if not ip.startswith('127.'):
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–º
                            ip_type = "internal" if ip.startswith(('10.', '172.16.', '192.168.')) else "external"
                            ip_info["local"].append({
                                "interface": interface,
                                "ip": ip,
                                "netmask": addr.get('netmask', '255.255.255.0'),
                                "type": ip_type
                            })
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {interface}: {e}")
                continue
    except ImportError:
        # –ï—Å–ª–∏ netifaces –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
        try:
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            if ip and not ip.startswith('127.'):
                ip_info["local"].append({
                    "interface": hostname,
                    "ip": ip,
                    "netmask": "255.255.255.0",
                    "type": "internal" if ip.startswith(('10.', '172.16.', '192.168.')) else "external"
                })
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ localhost IP: {e}")
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ API
    try:
        external_ip_apis = [
            "https://api.ipify.org",
            "https://ipinfo.io/ip",
            "https://ifconfig.me/ip"
        ]
        
        for api in external_ip_apis:
            try:
                response = requests.get(api, timeout=3)
                if response.status_code == 200:
                    ip_info["public"] = response.text.strip()
                    break
            except requests.RequestException:
                continue
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP: {e}")
    
    return ip_info

def check_port_available(port: int, host: str = '0.0.0.0') -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((host, port))
        sock.close()
        return result != 0
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞ {port}: {e}")
        return False

def generate_access_links(port: int = 8000, secure: bool = True) -> Dict[str, List[str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    
    Args:
        port: –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        secure: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS –∏–ª–∏ HTTP
        
    Returns:
        Dictionary —Å –∫–ª—é—á–∞–º–∏ 'local', 'public' –∏ —Å–ø–∏—Å–∫–∞–º–∏ —Å—Å—ã–ª–æ–∫
    """
    ip_info = get_ip_addresses()
    links = {
        "local": [],
        "public": [],
        "internal_network": [],
        "share_message": ""
    }
    
    protocol = "https" if secure else "http"
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
    links["local"].append(f"{protocol}://localhost:{port}")
    links["local"].append(f"{protocol}://127.0.0.1:{port}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ –≤ —Å–µ—Ç–∏
    for interface in ip_info["local"]:
        ip = interface["ip"]
        if interface.get("type") == "internal":
            links["internal_network"].append(f"{protocol}://{ip}:{port}")
        else:
            # –í–Ω–µ—à–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
            links["public"].append(f"{protocol}://{ip}:{port}")
    
    # –ü—É–±–ª–∏—á–Ω—ã–π IP –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if ip_info["public"]:
        public_url = f"{protocol}://{ip_info['public']}:{port}"
        links["public"].append(public_url)
        
        # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        links["share_message"] = f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ü—Ä–æ–º—Ç –ê—Ä–µ–Ω–µ: {public_url}\n\n"\
                                f"–õ–æ–≥–∏–Ω: 13guest\n–ü–∞—Ä–æ–ª—å: 13\n\n"\
                                f"–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."
    
    return links

# --- –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é SHA-256."""
    return hashlib.sha256(password.encode('utf-8')).hexdigest()

def generate_random_string(length: int = 32) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É."""
    import secrets
    import string
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã ---

def get_system_info() -> Dict[str, Any]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    info = {
        "platform": platform.platform(),
        "python_version": platform.python_version(),
        "processor": platform.processor(),
        "memory": get_memory_info(),
        "disk": get_disk_info()
    }
    return info

def get_memory_info() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏."""
    try:
        import psutil
        mem = psutil.virtual_memory()
        return {
            "total": mem.total,
            "available": mem.available,
            "percent": mem.percent,
            "used": mem.used,
            "free": mem.free
        }
    except ImportError:
        return {
            "error": "psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        }

def get_disk_info() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ."""
    try:
        import psutil
        disk = psutil.disk_usage('/')
        return {
            "total": disk.total,
            "used": disk.used,
            "free": disk.free,
            "percent": disk.percent
        }
    except ImportError:
        return {
            "error": "psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        }

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏ ---

def setup_logger(log_level: str = "INFO", log_file: Optional[str] = None) -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä."""
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    logger = logging.getLogger()
    logger.setLevel(getattr(logging, log_level.upper()))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(log_format))
    logger.addHandler(console_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if log_file:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        log_dir = os.path.dirname(log_file)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir, exist_ok=True)
            
        file_handler = logging.FileHandler(log_file)
        file_handler.setFormatter(logging.Formatter(log_format))
        logger.addHandler(file_handler)
    
    return logger

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ –∫—Ä–∞—Å–∏–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def print_startup_banner(version: str = "0.1.0"):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    banner = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                   ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                   ‚ïë
‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù                   ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                      ‚ïë
‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                      ‚ïë
‚ïë  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                      ‚ïë
‚ïë  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù                      ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                 ‚ïë
‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó                ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë                ‚ïë
‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë                ‚ïë
‚ïë  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë                ‚ïë
‚ïë  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù                ‚ïë
‚ïë                                                                   ‚ïë
‚ïë                      –í–µ—Ä—Å–∏—è: {version.ljust(8)}                        ‚ïë
‚ïë                                                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    system_info = f"""
    –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}
    Python: {platform.python_version()}
    """
    print(system_info)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è."""
    import importlib
    import logging
    
    logger = logging.getLogger(__name__)
    
    # –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–∞–∫–µ—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∏—Ö
    required_packages = {
        "huggingface_hub": {
            "critical": True,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã
            "purpose": "—Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ Hugging Face",
            "install_command": "pip install huggingface_hub==0.23.0"
        },
        "openai": {
            "critical": False,
            "purpose": "—Ä–∞–±–æ—Ç—ã —Å API OpenAI",
            "install_command": "pip install openai==1.30.1"
        },
        "google.generativeai": {
            "package_name": "google-generativeai",
            "critical": False,
            "purpose": "—Ä–∞–±–æ—Ç—ã —Å Google Gemini",
            "install_command": "pip install google-generativeai==0.6.0"
        },
        "anthropic": {
            "critical": False,
            "purpose": "—Ä–∞–±–æ—Ç—ã —Å Anthropic Claude",
            "install_command": "pip install anthropic==0.27.0"
        },
        "mistralai": {
            "critical": False, 
            "purpose": "—Ä–∞–±–æ—Ç—ã —Å Mistral AI",
            "install_command": "pip install mistralai==0.3.0"
        },
        "groq": {
            "critical": False,
            "purpose": "—Ä–∞–±–æ—Ç—ã —Å Groq API",
            "install_command": "pip install groq==0.8.0"
        }
    }
    
    missing_packages = []
    missing_critical = False
    
    for package_import, info in required_packages.items():
        try:
            if "." in package_import:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã —Å —Ç–æ—á–∫–æ–π, –∫–∞–∫ google.generativeai
                main_package = package_import.split(".")[0]
                importlib.import_module(main_package)
            else:
                importlib.import_module(package_import)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è huggingface_hub
            if package_import == "huggingface_hub":
                import huggingface_hub
                version = getattr(huggingface_hub, "__version__", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                logger.info(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'huggingface_hub' —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, –≤–µ—Ä—Å–∏—è: {version}")
                
        except ImportError:
            package_name = info.get("package_name", package_import)
            purpose = info.get("purpose", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            install_command = info.get("install_command", f"pip install {package_name}")
            
            message = f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ '{package_name}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å {purpose} –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            
            if info.get("critical", False):
                logger.error(message)
                logger.error(f"–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: {install_command}")
                missing_critical = True
            else:
                logger.warning(message)
                logger.warning(f"–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: {install_command}")
                
            missing_packages.append(package_name)
    
    if missing_packages:
        if missing_critical:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_packages)}")
            logger.error("–ù–µ–∫–æ—Ç–æ—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        else:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_packages)}")
            logger.warning("–ß–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        logger.info("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    return missing_critical, missing_packages